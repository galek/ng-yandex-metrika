{"version":3,"file":"ng-yandex-metrika-config-factories.js","sourceRoot":"","sources":["../../src/lib/ng-yandex-metrika-config-factories.ts"],"names":[],"mappings":"AACA,OAAO,EAAC,iBAAiB,EAAC,MAAM,iBAAiB,CAAC;AAClD,OAAO,EAAC,mBAAmB,EAAC,MAAM,+BAA+B,CAAC;AAClE,OAAO,EAAC,kBAAkB,EAAC,MAAM,uBAAuB,CAAC;AAEzD,MAAM,CAAC,MAAM,uBAAuB,GAAG,CAAC,cAA+C,EAAE,cAAuB,EAAE,EAAE;IAClH,OAAO,eAAe,CAAC,cAAc,EAAE,cAAc,CAAC,CAAC;AACzD,CAAC,CAAA;AAED,MAAM,eAAe,GAAG,CAAC,cAA+C,EAAE,cAAuB,EAAiB,EAAE;IAClH,MAAM,OAAO,GAAoB,qBAAqB,CAAC,cAAc,CAAC,CAAC;IAEvE,IAAI,SAAiB,CAAC;IAEtB,IAAI,CAAC,cAAc,EAAE;QACnB,SAAS,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;KAC3B;SAAM,IAAI,OAAO,cAAc,KAAK,QAAQ,IAAI,cAAc,GAAG,OAAO,CAAC,MAAM,EAAE;QAChF,SAAS,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC,EAAE,CAAC;KACxC;SAAM;QACL,SAAS,GAAG,cAAc,CAAC;KAC5B;IAED,IAAI,CAAC,SAAS,EAAE;QACd,OAAO,CAAC,IAAI,CAAC,4DAA4D,EAAE,cAAc,CAAC,CAAC;QAC3F,OAAO,IAAI,CAAC;KACb;IAED,IAAI,oBAAoB,GAAG,KAAK,CAAC;IACjC,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE;QAC5B,IAAI,CAAC,MAAM,EAAE;YACX,OAAO,CAAC,IAAI,CAAC,iDAAiD,CAAC,CAAC;YAChE,SAAS;SACV;QAED,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE;YACd,OAAO,CAAC,IAAI,CAAC,0EAA0E,EAAE,MAAM,CAAC,CAAC;YACjG,SAAS;SACV;QAED,IAAI,MAAM,CAAC,EAAE,KAAK,SAAS,EAAE;YAC3B,oBAAoB,GAAG,IAAI,CAAC;SAC7B;KACF;IAED,IAAI,CAAC,oBAAoB,EAAE;QACzB,OAAO,CAAC,IAAI,CAAC,4DAA4D,EAAE,cAAc,CAAC,CAAC;KAC5F;IACD,OAAO,SAAS,CAAC;AACnB,CAAC,CAAA;AAED,MAAM,CAAC,MAAM,eAAe,GAAG,CAAC,OAAwC,EAAE,EAAE;IAC1E,OAAO,aAAa,CAAC,OAAO,CAAC,CAAC;AAChC,CAAC,CAAA;AAED,MAAM,aAAa,GAAG,CAAC,OAAwC,EAAE,EAAE;IACjE,OAAO,qBAAqB,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,MAAqB,EAAE,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,mBAAmB,EAAE,EAAE,MAAM,CAAC,CAAC,CAAC;AACzH,CAAC,CAAA;AAED;;IAEI;AACJ,MAAM,qBAAqB,GAAG,CAAC,OAAwC,EAAE,EAAE;IACzE,MAAM,cAAc,GAAoB,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,OAAwB,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC;IACvG,OAAO,cAAc,CAAC;AACxB,CAAC,CAAA;AAED,MAAM,CAAC,MAAM,qBAAqB,GAAG,CAAC,cAAqC,EAAE,UAAe,EAAE,EAAE;IAC9F,IAAI,iBAAiB,CAAC,UAAU,CAAC,EAAE;QACjC,OAAO,kBAAkB,CAAC,IAAI,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC;KACtD;IAED,OAAO,GAAG,EAAE,CAAC,MAAM,CAAC;AACtB,CAAC,CAAA","sourcesContent":["import {CounterConfig} from \"./common/interfaces/counterConfig.interface\";\r\nimport {isPlatformBrowser} from '@angular/common';\r\nimport {YandexCounterConfig} from \"./yandexCounterConfig.service\";\r\nimport {insertYandexMetric} from \"./common/shared.utils\";\r\n\r\nexport const defaultCounterIdFactory = (counterConfigs: CounterConfig | CounterConfig[], defaultCounter?: string) => {\r\n  return defineDefaultId(counterConfigs, defaultCounter);\r\n}\r\n\r\nconst defineDefaultId = (counterConfigs: CounterConfig | CounterConfig[], defaultCounter?: string): string | null => {\r\n  const configs: CounterConfig[] = getCounterConfigArray(counterConfigs);\r\n\r\n  let defaultId: string;\r\n\r\n  if (!defaultCounter) {\r\n    defaultId = configs[0].id;\r\n  } else if (typeof defaultCounter === 'number' && defaultCounter < configs.length) {\r\n    defaultId = configs[defaultCounter].id;\r\n  } else {\r\n    defaultId = defaultCounter;\r\n  }\r\n\r\n  if (!defaultId) {\r\n    console.warn('[YandexMetric] You provided wrong counter id as a default:', defaultCounter);\r\n    return null;\r\n  }\r\n\r\n  let defaultCounterExists = false;\r\n  for (const config of configs) {\r\n    if (!config) {\r\n      console.warn(`[YandexMetric] Invalid element of array configs`);\r\n      continue;\r\n    }\r\n\r\n    if (!config.id) {\r\n      console.warn('[YandexMetric] You should provide counter id to use YandexMetric counter', config);\r\n      continue;\r\n    }\r\n\r\n    if (config.id === defaultId) {\r\n      defaultCounterExists = true;\r\n    }\r\n  }\r\n\r\n  if (!defaultCounterExists) {\r\n    console.warn('[YandexMetric] You provided wrong counter id as a default:', defaultCounter);\r\n  }\r\n  return defaultId;\r\n}\r\n\r\nexport const countersFactory = (configs: CounterConfig | CounterConfig[]) => {\r\n  return createConfigs(configs);\r\n}\r\n\r\nconst createConfigs = (configs: CounterConfig | CounterConfig[]) => {\r\n  return getCounterConfigArray(configs).map((config: CounterConfig) => Object.assign(new YandexCounterConfig(), config));\r\n}\r\n\r\n/*\r\n* Convert configs to ConfigArray\r\n* */\r\nconst getCounterConfigArray = (configs: CounterConfig | CounterConfig[]) => {\r\n  const counterConfigs: CounterConfig[] = !Array.isArray(configs) ? [configs as CounterConfig] : configs;\r\n  return counterConfigs;\r\n}\r\n\r\nexport const appInitializerFactory = (counterConfigs: YandexCounterConfig[], platformId: any) => {\r\n  if (isPlatformBrowser(platformId)) {\r\n    return insertYandexMetric.bind(null, counterConfigs);\r\n  }\r\n\r\n  return () => 'none';\r\n}\r\n"]}