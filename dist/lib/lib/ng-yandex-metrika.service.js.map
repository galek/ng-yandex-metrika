{"version":3,"file":"ng-yandex-metrika.service.js","sourceRoot":"","sources":["../../../src/lib/ng-yandex-metrika.service.ts"],"names":[],"mappings":"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","sourcesContent":["import {Injectable, Injector} from '@angular/core';\r\n\r\nimport {CommonOptions} from \"./common/interfaces/commonOptions.interface\";\r\nimport {HitOptions} from \"./common/interfaces/hitOptions.interface\";\r\nimport {CallbackOptions} from \"./common/interfaces/callbackOptions.interface\";\r\nimport {DEFAULT_COUNTER_ID, YANDEX_COUNTERS_CONFIGS} from \"./common/constants.service\";\r\nimport {YandexCounterConfig} from \"./yandexCounterConfig.service\";\r\nimport {UtilsCreateCounter, UtilsGetCounterNameById} from \"./common/shared.utils\";\r\nimport {UserIdCounterPositionInterface} from \"./common/interfaces/userIdCounterPosition.interface\";\r\nimport {ParamsCounterPositionInterface} from \"./common/interfaces/paramsCounterPosition.interface\";\r\nimport {CounterPosition} from \"./common/interfaces/counterPosition.interface\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class YandexMetric {\r\n  private readonly defaultCounterId: string;\r\n  private readonly positionToId: Array<string>;\r\n  private counterConfigs: YandexCounterConfig[];\r\n\r\n  constructor(readonly injector: Injector) {\r\n    this.defaultCounterId = injector.get<string>(DEFAULT_COUNTER_ID);\r\n    this.counterConfigs = injector.get<YandexCounterConfig[]>(YANDEX_COUNTERS_CONFIGS);\r\n    this.positionToId = this.counterConfigs.map(config => config.id);\r\n  }\r\n\r\n  static getCounterById(id: string) {\r\n    if (!window) {\r\n      console.error(`[YandexMetric.getCounterById] not exist ptr to window`);\r\n      return null;\r\n    }\r\n\r\n    const counterName: string = UtilsGetCounterNameById(id);\r\n    if (!(counterName?.length > 0)) {\r\n      console.error(`[YandexMetric.getCounterById] not exist YandexMetric.getCounterNameById with id: ${id}`);\r\n      return null;\r\n    }\r\n\r\n    const ptr = (window as any)[counterName];\r\n    if (!ptr) {\r\n      console.error(`[YandexMetric.getCounterById] not exist window[YandexMetric.getCounterNameById] with id: ${id}`);\r\n      return null;\r\n    }\r\n\r\n    return ptr;\r\n  }\r\n\r\n  static createCounter(config: YandexCounterConfig) {\r\n    return UtilsCreateCounter(config);\r\n  }\r\n\r\n  static getCounterNameById(id: string) {\r\n    return UtilsGetCounterNameById(id);\r\n  }\r\n\r\n  async extLink<T>(url: string, options: CommonOptions<T> | null = null, _counterPosition?: number): Promise<any> {\r\n    let counter = null;\r\n\r\n    if (_counterPosition !== null && _counterPosition !== undefined) {\r\n      counter = await this.counterIsLoaded(_counterPosition);\r\n    }\r\n    if (!counter) {\r\n      console.error(`[YandexMetric.extLink] counter ptr is not exist. For url: ${url}`);\r\n      return null;\r\n    }\r\n\r\n    // Обращаемся к Ya.extLink\r\n    await counter.extLink(url, options);\r\n\r\n    return this.getCallbackPromise(options, url);\r\n  }\r\n\r\n  /*\r\n  * YandexMetric function params:\r\n  ** url - string\r\n  ** options:\r\n  *** - callback - Function\r\n  *** - ctx - Object of context (this)\r\n  *** - referer String\r\n  *** - title String\r\n  *** - params Object\r\n  **** - order_price Number\r\n  **** - currency String\r\n  * https://yandex.ru/support/metrica/objects/file.html\r\n  * */\r\n  async file<T>(url: string, options: HitOptions<T> | null = null, _counterPosition: number): Promise<any> {\r\n    if (!options) {\r\n      console.error(`[YandexMetric.file] options ptr is not exist. For _counterPosition: ${_counterPosition}`);\r\n      return null;\r\n    }\r\n\r\n    const counter = await this.counterIsLoaded(_counterPosition);\r\n    if (!counter) {\r\n      console.error(`[YandexMetric.file] counter ptr is not exist. For url: ${url}`);\r\n      return null;\r\n    }\r\n\r\n    // Обращаемся к Ya.file\r\n    await counter.file(url, options);\r\n\r\n    return this.getCallbackPromise(options, url);\r\n  }\r\n\r\n  getClientID(_counterPosition: number): string {\r\n    const counter = this.getCounterByPosition(_counterPosition);\r\n    if (counter && counter.reachGoal) {\r\n      return counter.getClientID();\r\n    }\r\n\r\n    console.warn('[YandexMetric.getClientID] Counter is still loading');\r\n\r\n    return '';\r\n  }\r\n\r\n  async setUserID(userId: string, counterPosition: number): Promise<UserIdCounterPositionInterface | null> {\r\n    const counter = await this.counterIsLoaded(counterPosition);\r\n    if (!counter) {\r\n      console.error(`[YandexMetric.setUserID] counter ptr is not exist. For _counterPosition: ${counterPosition}`);\r\n      return null;\r\n    }\r\n\r\n    // Обращаемся к Ya.setUserID\r\n    await counter.setUserID(userId);\r\n\r\n    return {userId, counterPosition};\r\n  }\r\n\r\n  async userParams<T>(params: T, counterPosition: number): Promise<ParamsCounterPositionInterface<T> | null> {\r\n    const counter = await this.counterIsLoaded(counterPosition);\r\n    if (!counter) {\r\n      console.error(`[YandexMetric.userParams] counter ptr is not exist. For _counterPosition: ${counterPosition}`);\r\n      return null;\r\n    }\r\n\r\n    // Обращаемся к Ya.userParams\r\n    await counter.userParams(params);\r\n\r\n    return {params, counterPosition};\r\n  }\r\n\r\n  async params<T>(params: T, counterPosition: number): Promise<ParamsCounterPositionInterface<T> | null> {\r\n    const counter = await this.counterIsLoaded(counterPosition);\r\n    if (!counter || !params) {\r\n      console.error(`[YandexMetric.params] counter ptr is not exist. For _counterPosition: ${counterPosition}`);\r\n      return null;\r\n    }\r\n\r\n    // Обращаемся к Ya.params\r\n    counter.params(params);\r\n\r\n    return {params, counterPosition};\r\n  }\r\n\r\n  async replacePhones(counterPosition: number): Promise<CounterPosition | null> {\r\n    const counter = await this.counterIsLoaded(counterPosition);\r\n    if (!counter) {\r\n      console.error(`[YandexMetric.replacePhones] counter ptr is not exist. For _counterPosition: ${counterPosition}`);\r\n      return null;\r\n    }\r\n\r\n    // Обращаемся к Ya.replacePhones\r\n    await counter.replacePhones();\r\n\r\n    return {counterPosition};\r\n  }\r\n\r\n  async notBounce(options: CallbackOptions | null = null, counterPosition: number): Promise<any> {\r\n    if (!options) {\r\n      console.error(`[YandexMetric.notBounce] options ptr is not exist. For _counterPosition: ${counterPosition}`);\r\n      return null;\r\n    }\r\n\r\n    const counter = await this.counterIsLoaded(counterPosition);\r\n    if (!counter) {\r\n      console.error(`[YandexMetric.notBounce] counter ptr is not exist. For _counterPosition: ${counterPosition}`);\r\n      return null;\r\n    }\r\n\r\n    // Обращаемся к Ya.notBounce\r\n    await counter.notBounce(options);\r\n\r\n    return this.getCallbackPromise(options, options);\r\n  }\r\n\r\n  async fireEvent<T>(type: string, options: CommonOptions<T> | null = null, counterPosition: number): Promise<any> {\r\n    if (!options) {\r\n      console.error(`[YandexMetric.fireEvent] options ptr is not exist. For _counterPosition: ${counterPosition}`);\r\n      return null;\r\n    }\r\n\r\n    const counter = await this.counterIsLoaded(counterPosition);\r\n    if (!counter) {\r\n      console.warn(`[YandexMetric.hit] 'Event with type [${type}] can\\'t be fired because counter is still loading`);\r\n      return null;\r\n    }\r\n\r\n    // Обращаемся к Ya.reachGoal\r\n    counter.reachGoal(type, options.params, options.callback, options.ctx);\r\n\r\n    return this.getCallbackPromise(options, options);\r\n  }\r\n\r\n  /*\r\n  * YandexMetric function params:\r\n  ** url - string\r\n  ** options:\r\n  *** - callback - Function\r\n  *** - ctx - Object of context (this)\r\n  *** - referer String\r\n  *** - title String\r\n  *** - params Object\r\n  **** - order_price Number\r\n  **** - currency String\r\n  * https://yandex.ru/support/metrica/objects/hit.html\r\n  * */\r\n  async hit<T>(url: string, options: HitOptions<T> | null = null, counterPosition: number): Promise<any> {\r\n    if (!options) {\r\n      console.error(`[YandexMetric.hit] options ptr is not exist. For _counterPosition: ${counterPosition}`);\r\n      return null;\r\n    }\r\n\r\n    const counter = await this.counterIsLoaded(counterPosition);\r\n    if (!counter) {\r\n      console.warn(`[YandexMetric.hit] Hit for page [${url}] can\\'t be fired because counter is still loading`)\r\n      return null;\r\n    }\r\n\r\n    // Обращаемся к Ya.hit\r\n    await counter.hit(url, options);\r\n\r\n    return this.getCallbackPromise(options, options);\r\n  }\r\n\r\n  /*\r\n  * YandexMetric function params:\r\n  ** extensions: string | string[]\r\n  * https://yandex.ru/support/metrica/objects/addfileextension.html\r\n  * */\r\n  async addFileExtension(_extensions: string | string[], _counterPosition?: number) {\r\n    let counter = null;\r\n\r\n    if (_counterPosition !== null && _counterPosition !== undefined) {\r\n      counter = await this.counterIsLoaded(_counterPosition);\r\n    }\r\n\r\n    if (!counter) {\r\n      console.error(`[YandexMetric.addFileExtension] counter ptr is not exist`);\r\n      return false;\r\n    }\r\n\r\n    await counter.addFileExtension(_extensions);\r\n    return true;\r\n  }\r\n\r\n  private getCallbackPromise(options: any, resolveWith: any) {\r\n    return new Promise((resolve, reject) => {\r\n      const optionsCallback = options.callback;\r\n      options.callback = function () {\r\n        if (optionsCallback) {\r\n          optionsCallback.call(this);\r\n        }\r\n        resolve(resolveWith);\r\n      };\r\n    });\r\n  }\r\n\r\n  private counterIsLoaded(counterPosition: number): Promise<any> {\r\n    const counter = this.getCounterByPosition(counterPosition);\r\n    if (counter && counter.reachGoal) {\r\n      return Promise.resolve(counter);\r\n    } else {\r\n      return Promise.reject(counter);\r\n    }\r\n  }\r\n\r\n  private getCounterByPosition(counterPosition: number) {\r\n    const counterId = this.getCounterIdByPosition(counterPosition);\r\n    return YandexMetric.getCounterById(counterId);\r\n  }\r\n\r\n  private getCounterIdByPosition(counterPosition: number): string {\r\n    return (counterPosition === undefined) ? this.defaultCounterId : this.positionToId[counterPosition];\r\n  }\r\n}\r\n"]}